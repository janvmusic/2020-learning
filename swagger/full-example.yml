openapi: 3.0.0
info: 
  title: Sample API
  description: Just an example
  version: 0.1.9
  termsOfService: /terms-of-use # Relative url

externalDocs:
  url: /docs
  description: Find more info here

servers:
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server

  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing

  - url: https://{customerId}.example.com:{port}/v2
    variables:
      customerId:
        default: demo
        description: Customer ID assigned by the service provider
      port:
        enum:
          - '443'
          - '8443'
        default: '443'

  - url: '{protocol}://api.example.com'
    variables:
      protocols:
        enum:
          - http
          - https
        default: https

  - url: 'https://{environment}.example.com/v2'
    variables:
      environment:
        default: api # prod server
        enum:
          - api 
          - api.dev
          - api.staging

  - url: 'https://{server}/v2'
    variables:
      server:
        default: https://api.example.com # SaaS server

  - url: https://{region}.api.example.com
    variables:
      region:
        default: westus
        enum: 
          - westus
          - eastus2
          - westcentraulus
          - westeurope
          - southeastasia

paths:
  /users:
    get:
      operationId: getUsers
      summary: Returns a list of users
      description: some dummy description here
      parameters:
        - in: query
          name: offset
          schema:
            $ref: '#/components/parameters/offsetParam'
        - in: query
          name: limit
          schema:
            $ref: '#/components/parameters/limitParam'
      responses:
        '200': # status code
          description: A JSON array of user names
          content: 
            application/json:
              schema:
                type: array
                items: 
                  type: string
    post:
      operationId: addUsers
      summary: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: Parameter description
        schema:
          type: integer
          format: int64
          minimum: 1
    get:
      operationId: getUserById
      summary: Gets one or more users by ID.
      parameters:
        - in: path
          name: userId
          required: true
          description: A comma-separated list of user IDs.
          schema:
            type: array
            items:
              type: integer
            minItems: 1
          explode: false
          style: simple
      responses:
        '200':
          description: A user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: The specified user ID is invalid
        '404':
          description: User not found
        default:
          description: Unexpected error
      externalDocs:
        description: Learn more about user operations provided by this API
        url: http://api.example.com/docs/user-operations/
    
    # DELETE /users/{id} - uses a single ID.
    # Reuses the {id} parameter definition from the path level.
    delete:
      summary: Deletes the user with the specified ID.
      responses:
        '204':
          description: User was deleted.
      
  /users/{employeeId}:
    get:
      deprecated: true
      operationId: getUserByEmployeeId
      summary: Returns a user by employee ID
      parameters:
        - name: employeeId
          in: path
          required: true
          description: Parameter description
          schema:
            type: string
      responses:
        '200':
          description: A user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: The specified user ID is invalid
        '404':
          description: User not found
        default:
          description: Unexpected error
      externalDocs:
        description: Learn more about user operations provided by this API
        url: http://api.example.com/docs/user-operations/
        
  /user/role:
    get:
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [user, poweruser, admin]
          required: true
        - in: query
          name: rel_date
          required: true
          schema:
            type: string
            enum:
              - now
      responses:
        '200':
          description: OK

  /files:
    get:
      description: File upload and download
      servers:
        - url: https://files.example.com
          description: Override base path for all operations with the /files paths.
      responses:
        '200':
          description: Mock response.
        
  
  /ping:
    get:
      summary: Checks if the server is alive
      parameters:
        - in: header
          name: X-Request-ID
          schema:
            type: string
            format: uuid
          required: true
      servers: 
        - url: https:echo.example.com
          description: Override base path for the Get /ping operation
      responses:
        '200':
          description: Mock response.

  /info/logo:
    get:
      responses:
        '200':
          description: OK
          content:
            image/*:
              schema:
                type: string
                format: binary

  /employees:
    get:
      summary: list of employees
      parameters:
        - in: query
          name: filter
      
          # Wrap schema into content.<media-type>
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  color:
                    type: string
      responses:
        '200':
          description: OK
          content:
            application/json:       
              schema:
                $ref: '#/components/schemas/Employee'              
            application/xml:
              schema:
                $ref: '#/components/schemas/Employee'

  /employees/department:
    get:
      summary: Get employees by department
      parameters: 
        - in: query
          name: departmentId
          schema:
            type: integer
          description: Department Id
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum result size
        - in: query
          name: color
          schema:
            type: array
            items:
              type: string
          # Serialize as color=blue,black,brown
          style: form
          explode: false
        - in: cookie
          name: debug
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - in: cookie
          name: csrftoken
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
  
  /countries:
    get:
      summary: Get list of countries
      parameters:
        - in: query
          name: metadata
          schema:
            type: boolean
          allowEmptyValue: true
        - in: query
          name: limit
          schema:
            type: integer
            format: int32
            nullable: true
      responses:
        '200':
          description: OK
  
  /products:
    get:
      summary: Returns a list of procuts based on ids
      parameters:
        - in: query
          name: ids
          description: You can use multiple parameters here
          required: true
          schema:
            type: array
            items: 
              type: integer
          style: form
          explode: false
          examples:
            oneId: 
              summary: Example of single id
              value: [5] # This represents ?ids=5
            multipleIds:
              summary: Example of multiple ids
              value: [5,10,15] # this represents ?ids=5,10,15
      responses:
        '200':
          description: OK
  
  /products/{productId}:
    parameters: # path level parameters
      - in: path
        name: productId
        schema:
          type: integer
        required: true
        description: Product ID used to perform operations
    get:
      summary: get's a product by ID
      parameters:
      - in: query
        name: metadata
        schema:
          type: boolean
        required: false
        description: if true, then show extra info of product
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    patch:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /reports:
    get:
      parameters:
        - name: rdate
          in: query
          description: A relative range of dates, already predefined in this enum [Today, LastWeek]
          schema: 
            type: string
            enum: 
              - today
              - Today
              - TODAY
              - lastweek
              - LastWeek
              - LASTWEEK
        - name: start_date
          in: query
          description: > 
            Initial date for report, needs to be less than `end_date`.
            Must be used together `end_date`
            Incompatible with `rdate`
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          description: >
            End date for report, needs to be greater than `start_date`.
            Must be used together `start_date`
            Incompatible with `rdate`
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
        '400':
          description: Either `rdate` or `start_date`+`end_date` are required

  /pets:
    post:
      summary: add a new pet 
      deprecated: true
      requestBody: 
        description: Creates a new pet 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PetForm'
          text/plain:
            schema:
              type: string
      responses:
        '201':
          description: Created

  /pets/v2:
    post:
      summary: add a new pet 
      requestBody: 
        description: Creates a new pet 
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Cat'
                - $ref: '#/components/schemas/Dog'
                - $ref: '#/components/schemas/Fish'
      responses:
        '201':
          description: Created

  /avatar:
    put:
      summary: Upload an avatar
      requestBody:
        required: true
        content:
          image/*:
            schema:
              type: string  
              format: binary
      responses:
        '201':
          description: Created
          
  /cars:
    post:
      summary: Add a new car specification
      requestBody:
        $ref: '#/components/requestBodies/CarRequest'
      responses:
        '201':
          description: created

  /cars/{carId}:
    put:
      summary: Update a car specification
      parameters:
        - name: carId
          in: path
          required: true
          description: Parameter description
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        $ref: '#/components/requestBodies/CarRequest'
      responses:
        '201': 
          description: Updated

components:
  parameters:
    offsetParam:  # <-- Arbitrary name for the definition that will be used to refer to it.
                  # Not necessarily the same as the parameter name.
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      description: The number of items to skip before starting to collect the result set.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: The numbers of items to return.
  schemas:
    User:
      properties:
        id: 
          type: integer
          example: 1
        name:
          type: string
          example: Jessica Smith
      required:
        - id
        - name
        
    Employee:
      type: object
      properties:                                                                                     
        id:
          type: integer
        name:
          type: string
        fullTime: 
          type: boolean
    
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
    
    Pet:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        owner:
          type: string
          
    PetForm:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        owner:
          type: string
        formType:
          type: string

    Dog:
      type: object
      properties:
        id:
          type: integer
        dogName:
          type: string
        owner:
          type: string
          
    Cat:
      type: object
      properties:
        id:
          type: integer
        catName:
          type: string
        owner:
          type: string
          
    Fish:
      type: object
      properties:
        id:
          type: integer
        fishName:
          type: string
        owner:
          type: string
          
    Car:
      type: object
      properties:
        year:
          type: integer
        make:
          type: string
          enum:
            - Nissan
            - Mazda
            - Toyota
            - Lexus
            - Acura
        model:
          type: string
          
  requestBodies:
    CarRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Car'

  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oauth/dialog
          tokenUrl: /oauth/token

